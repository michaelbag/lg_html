#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ DataMatrix –Ω–∞ Windows
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å DataMatrix
"""

import sys
import platform
import subprocess
import importlib.util

def print_header():
    print("=" * 60)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DATAMATRIX –ù–ê WINDOWS")
    print("=" * 60)
    print(f"–û–°: {platform.system()} {platform.release()}")
    print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")
    print(f"Python: {sys.version}")
    print("-" * 60)

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    if version.major == 3 and version.minor >= 8:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - –ø–æ–¥—Ö–æ–¥–∏—Ç")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - —Ç—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False

def check_pip():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ pip"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ pip...")
    try:
        import pip
        print(f"‚úÖ pip {pip.__version__} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError:
        print("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_conda():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ conda"""
    print("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ conda...")
    try:
        result = subprocess.run(['conda', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print(f"‚úÖ {result.stdout.strip()}")
            return True
        else:
            print("‚ùå conda –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ùå conda –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_pylibdmtx():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ pylibdmtx"""
    print("\nüî¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ pylibdmtx...")
    try:
        import pylibdmtx
        print("‚úÖ pylibdmtx –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            encoded = pylibdmtx.encode(b'test_data')
            print("‚úÖ DataMatrix –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DataMatrix: {e}")
            return False
            
    except ImportError as e:
        print(f"‚ùå pylibdmtx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return False

def check_qrcode():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ qrcode (fallback)"""
    print("\nüì± –ü—Ä–æ–≤–µ—Ä–∫–∞ qrcode (fallback)...")
    try:
        import qrcode
        print("‚úÖ qrcode —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data('test')
            qr.make(fit=True)
            print("‚úÖ QR –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {e}")
            return False
            
    except ImportError:
        print("‚ùå qrcode –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_other_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = [
        ('PIL', 'Pillow'),
        ('reportlab', 'reportlab'),
        ('PyPDF2', 'PyPDF2')
    ]
    
    results = {}
    for module, name in dependencies:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            results[name] = True
        except ImportError:
            print(f"‚ùå {name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            results[name] = False
    
    return results

def suggest_solutions():
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"""
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 40)
    
    print("\nü•á –õ–£–ß–®–ò–ô –í–ê–†–ò–ê–ù–¢ - Anaconda/Miniconda:")
    print("1. –°–∫–∞—á–∞–π—Ç–µ Anaconda —Å https://anaconda.com/download")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: conda create -n labelgen python=3.9")
    print("3. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ: conda activate labelgen")
    print("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: conda install -c conda-forge pylibdmtx")
    
    print("\nü•à –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê - pip + Visual Studio Build Tools:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Visual Studio Build Tools")
    print("2. pip install pylibdmtx")
    
    print("\nü•â –ü–†–û–°–¢–û–ô –í–ê–†–ò–ê–ù–¢ - —Ç–æ–ª—å–∫–æ QR –∫–æ–¥—ã:")
    print("1. pip install -r requirements-minimal.txt")
    print("2. –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ QR –∫–æ–¥—ã")
    
    print("\nüìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("- INSTALL_WINDOWS.md - –æ–±—â–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞")
    print("- DATAMATRIX_WINDOWS.md - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è DataMatrix")

def test_main_script():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV
        with open('test_diagnostic.csv', 'w', encoding='utf-8') as f:
            f.write("01046000000000121=ABC1234567890\t–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è\t–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        result = subprocess.run([
            sys.executable, 'main.py', 'test_diagnostic.csv', 'test_output'
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            if "pylibdmtx" in result.stdout:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DataMatrix")
            elif "QR –∫–æ–¥" in result.stdout:
                print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è QR –∫–æ–¥ (fallback)")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ: {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        import os
        try:
            os.remove('test_diagnostic.csv')
            import shutil
            shutil.rmtree('test_output', ignore_errors=True)
        except:
            pass

def main():
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    python_ok = check_python_version()
    pip_ok = check_pip()
    conda_ok = check_conda()
    pylibdmtx_ok = check_pylibdmtx()
    qrcode_ok = check_qrcode()
    other_deps = check_other_dependencies()
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    test_main_script()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("=" * 60)
    
    if pylibdmtx_ok:
        print("üéâ –û–¢–õ–ò–ß–ù–û! DataMatrix –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç")
    elif qrcode_ok:
        print("‚úÖ –•–û–†–û–®–û! QR –∫–æ–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç (DataMatrix –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê! –ù—É–∂–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    if not any(other_deps.values()):
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    suggest_solutions()
    
    print("\n" + "=" * 60)
    print("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("=" * 60)

if __name__ == "__main__":
    main()
