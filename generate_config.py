#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —ç—Ç–∏–∫–µ—Ç–æ–∫ v2.17
–í–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞: 1.1
–í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞: 2.17
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è CSV –∏ Excel —Ñ–∞–π–ª–æ–≤

Copyright (C) 2025 Michael Bag

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

–ê–≤—Ç–æ—Ä: Michael Bag
–í–µ—Ä—Å–∏—è: 1.1
"""

import json
import argparse
import os
import sys
from pathlib import Path

def create_single_template_config(data_file, template_pdf, output_pdf, **kwargs):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è single —à–∞–±–ª–æ–Ω–∞"""
    config = {
        "_comment": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è single —à–∞–±–ª–æ–Ω–∞ - –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫—É",
        "description": "Single template configuration",
        
        "_template_type_comment": "–¢–∏–ø —à–∞–±–ª–æ–Ω–∞: 'single' (–æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫—É) –∏–ª–∏ 'multiple' (–Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∏–∫–µ—Ç–æ–∫ –Ω–∞ —à–∞–±–ª–æ–Ω–µ)",
        "template_type": "single",
        
        "_data_file_comment": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel .xlsx). –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º",
        "data_file": data_file,
        
        "_template_pdf_comment": "–ü—É—Ç—å –∫ PDF —à–∞–±–ª–æ–Ω—É. –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º",
        "template_pdf": template_pdf,
        
        "_output_pdf_comment": "–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É PDF —Ñ–∞–π–ª—É. –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º",
        "output_pdf": output_pdf,
        
        "_datamatrix_comment": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã DataMatrix –∫–æ–¥–∞",
        "dm_x": kwargs.get('dm_x', 10),
        "dm_y": kwargs.get('dm_y', 5),
        "dm_size": kwargs.get('dm_size', 15),
        "datamatrix_column": kwargs.get('datamatrix_column', 0),
        
        "_text_comment": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–µ",
        "text_column": kwargs.get('text_column', None),
        "text_start": kwargs.get('text_start', 0),
        "text_length": kwargs.get('text_length', None),
        "text_font_size": kwargs.get('text_font_size', 12),
        "text_offset_x": kwargs.get('text_offset_x', 5),
        "text_offset_y": kwargs.get('text_offset_y', 0),
        "text_color": kwargs.get('text_color', 'black'),
        
        "_excel_comment": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Excel —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)",
        "excel_sheet": kwargs.get('excel_sheet', 0),
        
        "_quality_comment": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞",
        "dpi": kwargs.get('dpi', 300)
    }
    
    # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
    config = {k: v for k, v in config.items() if v is not None}
    return config

def create_multiple_template_config(data_file, template_pdf, output_pdf, **kwargs):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è multiple —à–∞–±–ª–æ–Ω–∞"""
    config = {
        "_comment": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è multiple —à–∞–±–ª–æ–Ω–∞ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∏–∫–µ—Ç–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
        "description": "Multiple template configuration",
        
        "_template_type_comment": "–¢–∏–ø —à–∞–±–ª–æ–Ω–∞: 'single' (–æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫—É) –∏–ª–∏ 'multiple' (–Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∏–∫–µ—Ç–æ–∫ –Ω–∞ —à–∞–±–ª–æ–Ω–µ)",
        "template_type": "multiple",
        
        "_data_file_comment": "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel .xlsx). –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º",
        "data_file": data_file,
        
        "_template_pdf_comment": "–ü—É—Ç—å –∫ PDF —à–∞–±–ª–æ–Ω—É. –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º",
        "template_pdf": template_pdf,
        
        "_output_pdf_comment": "–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É PDF —Ñ–∞–π–ª—É. –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º",
        "output_pdf": output_pdf,
        
        "_labels_comment": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç—Ç–∏–∫–µ—Ç–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
        "labels_horizontal": kwargs.get('labels_horizontal', 2),
        "labels_vertical": kwargs.get('labels_vertical', 3),
        "label_width": kwargs.get('label_width', 100),
        "label_height": kwargs.get('label_height', 50),
        "label_margin_left": kwargs.get('label_margin_left', 10),
        "label_margin_top": kwargs.get('label_margin_top', 15),
        "label_spacing_horizontal": kwargs.get('label_spacing_horizontal', 5),
        "label_spacing_vertical": kwargs.get('label_spacing_vertical', 3),
        
        "_datamatrix_comment": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã DataMatrix –∫–æ–¥–∞",
        "dm_x": kwargs.get('dm_x', 20),
        "dm_y": kwargs.get('dm_y', 10),
        "dm_size": kwargs.get('dm_size', 15),
        "datamatrix_column": kwargs.get('datamatrix_column', 0),
        
        "_text_comment": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–µ",
        "text_column": kwargs.get('text_column', None),
        "text_start": kwargs.get('text_start', 0),
        "text_length": kwargs.get('text_length', None),
        "text_font_size": kwargs.get('text_font_size', 12),
        "text_offset_x": kwargs.get('text_offset_x', 25),
        "text_offset_y": kwargs.get('text_offset_y', 5),
        "text_color": kwargs.get('text_color', 'black'),
        
        "_excel_comment": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Excel —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)",
        "excel_sheet": kwargs.get('excel_sheet', 0),
        
        "_quality_comment": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞",
        "dpi": kwargs.get('dpi', 300)
    }
    
    # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
    config = {k: v for k, v in config.items() if v is not None}
    return config

def detect_file_type(file_path):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if not file_path:
        return "unknown"
    
    file_path = str(file_path).lower()
    if file_path.endswith(('.xlsx', '.xls')):
        return "excel"
    elif file_path.endswith('.csv'):
        return "csv"
    else:
        return "unknown"

def get_user_input(prompt, default=None, input_type=str, choices=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞ –∏ –≤—ã–±–æ—Ä–∞"""
    while True:
        if default is not None:
            full_prompt = f"{prompt} [{default}]: "
        else:
            full_prompt = f"{prompt}: "
        
        try:
            user_input = input(full_prompt).strip()
            
            # –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π –∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not user_input and default is not None:
                return default
            
            # –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π –∏ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not user_input:
                print("‚ùå –ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
            if choices and user_input not in choices:
                print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {', '.join(choices)}")
                continue
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
            if input_type == int:
                return int(user_input)
            elif input_type == float:
                return float(user_input)
            else:
                return user_input
                
        except ValueError:
            print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ {input_type.__name__}")
        except KeyboardInterrupt:
            print("\n\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            sys.exit(1)


def select_data_file():
    """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ø–∫–∏ input_data —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤"""
    data_dir = Path("input_data")
    
    if not data_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ input_data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return get_user_input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)")
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–æ –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞—Ö
    data_files = []
    for ext in ['*.csv', '*.xlsx', '*.xls']:
        data_files.extend(data_dir.rglob(ext))
    
    if not data_files:
        print("‚ùå –í –ø–∞–ø–∫–µ input_data –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        return get_user_input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –ø–∞–ø–∫–µ, –ø–æ—Ç–æ–º –ø–æ –∏–º–µ–Ω–∏
    data_files.sort(key=lambda x: (x.parent.name, x.name))
    
    print("\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö:")
    print("-" * 50)
    
    current_folder = None
    for i, file_path in enumerate(data_files, 1):
        file_size = file_path.stat().st_size
        size_str = f"{file_size:,} –±–∞–π—Ç" if file_size < 1024 else f"{file_size/1024:.1f} –ö–ë"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        folder_name = file_path.parent.name
        if folder_name != current_folder:
            if current_folder is not None:
                print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–∞–ø–∫–∞–º–∏
            print(f"üìÇ {folder_name}/")
            current_folder = folder_name
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ—Ç—Å—Ç—É–ø–æ–º
        relative_path = file_path.relative_to(data_dir)
        print(f"   {i:2d}. {file_path.name} ({size_str})")
    
    print(f"\n{len(data_files) + 1:2d}. –í–≤–µ—Å—Ç–∏ –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é")
    
    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö (1-{len(data_files) + 1}): ").strip()
            
            if not choice:
                print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
                continue
            
            choice_num = int(choice)
            
            if choice_num == len(data_files) + 1:
                return get_user_input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)")
            elif 1 <= choice_num <= len(data_files):
                selected_file = data_files[choice_num - 1]
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selected_file}")
                return str(selected_file)
            else:
                print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(data_files) + 1}")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        except KeyboardInterrupt:
            print("\n\n‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            sys.exit(0)


def select_template_file():
    """–í—ã–±–æ—Ä PDF —à–∞–±–ª–æ–Ω–∞ –∏–∑ –ø–∞–ø–∫–∏ input_templates —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤"""
    template_dir = Path("input_templates")
    
    if not template_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ input_templates –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return get_user_input("–ü—É—Ç—å –∫ PDF —à–∞–±–ª–æ–Ω—É")
    
    # –ò—â–µ–º PDF —Ñ–∞–π–ª—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤–æ –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞—Ö
    template_files = list(template_dir.rglob("*.pdf"))
    
    if not template_files:
        print("‚ùå –í –ø–∞–ø–∫–µ input_templates –Ω–µ –Ω–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤")
        return get_user_input("–ü—É—Ç—å –∫ PDF —à–∞–±–ª–æ–Ω—É")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –ø–∞–ø–∫–µ, –ø–æ—Ç–æ–º –ø–æ –∏–º–µ–Ω–∏
    template_files.sort(key=lambda x: (x.parent.name, x.name))
    
    print("\nüìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ PDF —à–∞–±–ª–æ–Ω—ã:")
    print("-" * 50)
    
    current_folder = None
    for i, file_path in enumerate(template_files, 1):
        file_size = file_path.stat().st_size
        size_str = f"{file_size:,} –±–∞–π—Ç" if file_size < 1024 else f"{file_size/1024:.1f} –ö–ë"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        folder_name = file_path.parent.name
        if folder_name != current_folder:
            if current_folder is not None:
                print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–∞–ø–∫–∞–º–∏
            print(f"üìÇ {folder_name}/")
            current_folder = folder_name
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ—Ç—Å—Ç—É–ø–æ–º
        relative_path = file_path.relative_to(template_dir)
        print(f"   {i:2d}. {file_path.name} ({size_str})")
    
    print(f"\n{len(template_files) + 1:2d}. –í–≤–µ—Å—Ç–∏ –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é")
    
    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ PDF —à–∞–±–ª–æ–Ω (1-{len(template_files) + 1}): ").strip()
            
            if not choice:
                print("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
                continue
            
            choice_num = int(choice)
            
            if choice_num == len(template_files) + 1:
                return get_user_input("–ü—É—Ç—å –∫ PDF —à–∞–±–ª–æ–Ω—É")
            elif 1 <= choice_num <= len(template_files):
                selected_file = template_files[choice_num - 1]
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {selected_file}")
                return str(selected_file)
            else:
                print(f"‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(template_files) + 1}")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        except KeyboardInterrupt:
            print("\n\n‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            sys.exit(0)


def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("=" * 60)
    print("üîß –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú –°–û–ó–î–ê–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 60)
    print()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print("üìÅ –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´")
    print("-" * 30)
    
    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
    print("–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:")
    data_file = select_data_file()
    
    # –í—ã–±–æ—Ä PDF —à–∞–±–ª–æ–Ω–∞
    print("\n–í—ã–±–æ—Ä PDF —à–∞–±–ª–æ–Ω–∞:")
    template_pdf = select_template_file()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
    template_path = Path(template_pdf)
    template_name = template_path.stem  # –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    output_filename = f"{template_name}_result.pdf"
    output_default = f"output/{output_filename}"
    
    output_pdf = get_user_input(
        "–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É PDF —Ñ–∞–π–ª—É",
        default=output_default
    )
    
    template_type = get_user_input(
        "–¢–∏–ø —à–∞–±–ª–æ–Ω–∞ (single - –æ–¥–∏–Ω –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫—É, multiple - –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)",
        default="single",
        choices=["single", "multiple"]
    )
    
    print()
    print("üìä –ü–ê–†–ê–ú–ï–¢–†–´ DATAMATRIX")
    print("-" * 30)
    
    dm_x = get_user_input(
        "–ü–æ–∑–∏—Ü–∏—è DataMatrix –ø–æ X (–º–º) - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è",
        default=10.0,
        input_type=float
    )
    
    dm_y = get_user_input(
        "–ü–æ–∑–∏—Ü–∏—è DataMatrix –ø–æ Y (–º–º) - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è",
        default=5.0,
        input_type=float
    )
    
    dm_size = get_user_input(
        "–†–∞–∑–º–µ—Ä DataMatrix (–º–º)",
        default=15.0,
        input_type=float
    )
    
    datamatrix_column = get_user_input(
        "–ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ —Å DataMatrix –¥–∞–Ω–Ω—ã–º–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 0)",
        default=0,
        input_type=int
    )
    
    print()
    print("üìù –ü–ê–†–ê–ú–ï–¢–†–´ –¢–ï–ö–°–¢–ê")
    print("-" * 30)
    
    use_text = get_user_input(
        "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫—É? (y/n)",
        default="n",
        choices=["y", "n", "yes", "no"]
    ).lower() in ["y", "yes"]
    
    text_column = None
    text_start = 0
    text_length = None
    text_font_size = 12
    text_offset_x = 5.0
    text_offset_y = 0.0
    text_color = "black"
    
    if use_text:
        text_column = get_user_input(
            "–ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ —Å —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞—á–∏–Ω–∞—è —Å 0)",
            input_type=int
        )
        
        text_start = get_user_input(
            "–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞",
            default=0,
            input_type=int
        )
        
        text_length = get_user_input(
            "–î–ª–∏–Ω–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏)",
            input_type=int
        )
        
        text_font_size = get_user_input(
            "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Ç–µ–∫—Å—Ç–∞",
            default=12,
            input_type=int
        )
        
        text_offset_x = get_user_input(
            "–°–º–µ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ X –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ DataMatrix (–º–º)",
            default=5.0,
            input_type=float
        )
        
        text_offset_y = get_user_input(
            "–°–º–µ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ Y –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ DataMatrix (–º–º)",
            default=0.0,
            input_type=float
        )
        
        text_color = get_user_input(
            "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞",
            default="black"
        )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è multiple —à–∞–±–ª–æ–Ω–∞
    labels_horizontal = 2
    labels_vertical = 3
    label_width = 100.0
    label_height = 50.0
    label_margin_left = 10.0
    label_margin_top = 15.0
    label_spacing_horizontal = 5.0
    label_spacing_vertical = 3.0
    
    if template_type == "multiple":
        print()
        print("üìê –ü–ê–†–ê–ú–ï–¢–†–´ MULTIPLE –®–ê–ë–õ–û–ù–ê")
        print("-" * 30)
        
        labels_horizontal = get_user_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∏–∫–µ—Ç–æ–∫ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏",
            default=2,
            input_type=int
        )
        
        labels_vertical = get_user_input(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∏–∫–µ—Ç–æ–∫ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏",
            default=3,
            input_type=int
        )
        
        label_width = get_user_input(
            "–®–∏—Ä–∏–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —ç—Ç–∏–∫–µ—Ç–∫–∏ (–º–º)",
            default=100.0,
            input_type=float
        )
        
        label_height = get_user_input(
            "–í—ã—Å–æ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —ç—Ç–∏–∫–µ—Ç–∫–∏ (–º–º)",
            default=50.0,
            input_type=float
        )
        
        label_margin_left = get_user_input(
            "–û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –æ—Ç –∫—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–º)",
            default=10.0,
            input_type=float
        )
        
        label_margin_top = get_user_input(
            "–û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –æ—Ç –∫—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–º–º)",
            default=15.0,
            input_type=float
        )
        
        label_spacing_horizontal = get_user_input(
            "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç—Ç–∏–∫–µ—Ç–∫–∞–º–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (–º–º)",
            default=5.0,
            input_type=float
        )
        
        label_spacing_vertical = get_user_input(
            "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç—Ç–∏–∫–µ—Ç–∫–∞–º–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–º–º)",
            default=3.0,
            input_type=float
        )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Excel
    excel_sheet = 0
    file_type = detect_file_type(data_file)
    if file_type == "excel":
        print()
        print("üìä –ü–ê–†–ê–ú–ï–¢–†–´ EXCEL")
        print("-" * 30)
        
        excel_sheet = get_user_input(
            "–ù–æ–º–µ—Ä –∏–ª–∏ –∏–º—è –ª–∏—Å—Ç–∞ Excel (0 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞)",
            default=0
        )
    
    print()
    print("‚öôÔ∏è –ü–ê–†–ê–ú–ï–¢–†–´ –ö–ê–ß–ï–°–¢–í–ê")
    print("-" * 30)
    
    dpi = get_user_input(
        "DPI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        default=300,
        input_type=int
    )
    
    print()
    print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("-" * 30)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
    config_filename = f"{template_name}_conf.json"
    config_default = f"conf/{config_filename}"
    
    output_file = get_user_input(
        "–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É JSON —Ñ–∞–π–ª—É",
        default=config_default
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    kwargs = {
        'dm_x': dm_x,
        'dm_y': dm_y,
        'dm_size': dm_size,
        'datamatrix_column': datamatrix_column,
        'text_column': text_column,
        'text_start': text_start,
        'text_length': text_length,
        'text_font_size': text_font_size,
        'text_offset_x': text_offset_x,
        'text_offset_y': text_offset_y,
        'text_color': text_color,
        'excel_sheet': excel_sheet,
        'dpi': dpi
    }
    
    if template_type == 'multiple':
        kwargs.update({
            'labels_horizontal': labels_horizontal,
            'labels_vertical': labels_vertical,
            'label_width': label_width,
            'label_height': label_height,
            'label_margin_left': label_margin_left,
            'label_margin_top': label_margin_top,
            'label_spacing_horizontal': label_spacing_horizontal,
            'label_spacing_vertical': label_spacing_vertical
        })
        config = create_multiple_template_config(data_file, template_pdf, output_pdf, **kwargs)
    else:
        config = create_single_template_config(data_file, template_pdf, output_pdf, **kwargs)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        
        print()
        print("‚úÖ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!")
        print("=" * 50)
        print(f"üìÑ –§–∞–π–ª: {output_file}")
        print(f"üìä –¢–∏–ø —à–∞–±–ª–æ–Ω–∞: {template_type}")
        print(f"üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {data_file}")
        print(f"üìÑ –®–∞–±–ª–æ–Ω PDF: {template_pdf}")
        print(f"üìÑ –í—ã—Ö–æ–¥–Ω–æ–π PDF: {output_pdf}")
        
        if file_type == "excel":
            print(f"üìä –õ–∏—Å—Ç Excel: {excel_sheet}")
        
        print()
        print("üöÄ –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        print(f"   python gen2.py -c {output_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

def main():
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –∏ –∞–≤—Ç–æ—Ä–µ
    __version__ = "1.1"
    __author__ = "Michael BAG"
    __author_email__ = "mk@p7net.ru"
    __author_telegram__ = "https://t.me/michaelbag"
    __description__ = "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —ç—Ç–∏–∫–µ—Ç–æ–∫"
    
    parser = argparse.ArgumentParser(
        description=f"{__description__} v{__version__} (–ø—Ä–æ–µ–∫—Ç v2.17)",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. üîß –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤):
   python generate_config.py -i

2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è CSV —Ñ–∞–π–ª–∞ (single):
   python generate_config.py data.csv template.pdf output.pdf -t single

3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Excel —Ñ–∞–π–ª–∞ (multiple):
   python generate_config.py data.xlsx template.pdf output.pdf -t multiple -es "Sheet1"

4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (–∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã):
   python generate_config.py data.csv template.pdf output.pdf -t single -dx 15 -dy 10 -ds 20

5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ multiple —à–∞–±–ª–æ–Ω–æ–º:
   python generate_config.py data.csv template.pdf output.pdf -t multiple -lh 3 -lv 4 -tc 2 -tfs 14

6. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
   python generate_config.py data.csv template.pdf output.pdf --type single --dm-x 15 --dm-y 10 --dm-size 20

–ê–≤—Ç–æ—Ä: {__author__}
E-mail: {__author_email__}
Telegram: {__author_telegram__}
–í–µ—Ä—Å–∏—è: {__version__}
        """
    )
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ)
    parser.add_argument('data_file', nargs='?', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)')
    parser.add_argument('template_pdf', nargs='?', help='–ü—É—Ç—å –∫ PDF —à–∞–±–ª–æ–Ω—É')
    parser.add_argument('output_pdf', nargs='?', help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É PDF —Ñ–∞–π–ª—É')
    
    # –¢–∏–ø —à–∞–±–ª–æ–Ω–∞
    parser.add_argument('--type', '-t', choices=['single', 'multiple'],
                       help='–¢–∏–ø —à–∞–±–ª–æ–Ω–∞: single (–æ–¥–∏–Ω –Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫—É) –∏–ª–∏ multiple (–Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã DataMatrix
    parser.add_argument('--dm-x', '-dx', type=float, default=10, help='–ü–æ–∑–∏—Ü–∏—è DataMatrix –ø–æ X (–º–º)')
    parser.add_argument('--dm-y', '-dy', type=float, default=5, help='–ü–æ–∑–∏—Ü–∏—è DataMatrix –ø–æ Y (–º–º)')
    parser.add_argument('--dm-size', '-ds', type=float, default=15, help='–†–∞–∑–º–µ—Ä DataMatrix (–º–º)')
    parser.add_argument('--datamatrix-column', '-dc', type=int, default=0, help='–ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ —Å DataMatrix –¥–∞–Ω–Ω—ã–º–∏')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—Å—Ç–∞
    parser.add_argument('--text-column', '-tc', type=int, help='–ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ —Å —Ç–µ–∫—Å—Ç–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    parser.add_argument('--text-start', '-ts', type=int, default=0, help='–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞')
    parser.add_argument('--text-length', '-tl', type=int, help='–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    parser.add_argument('--text-font-size', '-tfs', type=int, default=12, help='–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Ç–µ–∫—Å—Ç–∞')
    parser.add_argument('--text-offset-x', '-tox', type=float, default=5, help='–°–º–µ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ X (–º–º)')
    parser.add_argument('--text-offset-y', '-toy', type=float, default=0, help='–°–º–µ—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ Y (–º–º)')
    parser.add_argument('--text-color', '-tcl', default='black', help='–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è multiple —à–∞–±–ª–æ–Ω–∞
    parser.add_argument('--labels-horizontal', '-lh', type=int, default=2, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∏–∫–µ—Ç–æ–∫ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏')
    parser.add_argument('--labels-vertical', '-lv', type=int, default=3, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∏–∫–µ—Ç–æ–∫ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏')
    parser.add_argument('--label-width', '-lw', type=float, default=100, help='–®–∏—Ä–∏–Ω–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏ (–º–º)')
    parser.add_argument('--label-height', '-lh2', type=float, default=50, help='–í—ã—Å–æ—Ç–∞ —ç—Ç–∏–∫–µ—Ç–∫–∏ (–º–º)')
    parser.add_argument('--label-margin-left', '-lml', type=float, default=10, help='–û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ (–º–º)')
    parser.add_argument('--label-margin-top', '-lmt', type=float, default=15, help='–û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É (–º–º)')
    parser.add_argument('--label-spacing-horizontal', '-lsh', type=float, default=5, help='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (–º–º)')
    parser.add_argument('--label-spacing-vertical', '-lsv', type=float, default=3, help='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–º–º)')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Excel
    parser.add_argument('--excel-sheet', '-es', default=0, help='–ù–æ–º–µ—Ä –∏–ª–∏ –∏–º—è –ª–∏—Å—Ç–∞ Excel (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)')
    
    # –ö–∞—á–µ—Å—Ç–≤–æ
    parser.add_argument('--dpi', '-d', type=int, default=300, help='DPI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)')
    
    # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    parser.add_argument('-o', '--output', help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É JSON —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config.json)')
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    parser.add_argument('-i', '--interactive', action='store_true', 
                       help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    if args.interactive:
        interactive_mode()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if not args.data_file or not args.template_pdf or not args.output_pdf or not args.type:
        print("‚ùå –û—à–∏–±–∫–∞: –í –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print("   - data_file (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏)")
        print("   - template_pdf (–ø—É—Ç—å –∫ PDF —à–∞–±–ª–æ–Ω—É)")
        print("   - output_pdf (–ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É PDF —Ñ–∞–π–ª—É)")
        print("   - --type –∏–ª–∏ -t (—Ç–∏–ø —à–∞–±–ª–æ–Ω–∞: single –∏–ª–∏ multiple)")
        print()
        print("üí° –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python generate_config.py -i")
        sys.exit(1)
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –∏ –∞–≤—Ç–æ—Ä–µ
    print("=" * 60)
    print(f"{__description__} v{__version__}")
    print(f"–ê–≤—Ç–æ—Ä: {__author__}")
    print(f"–í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞: 2.17")
    print("=" * 60)
    print()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
    file_type = detect_file_type(args.data_file)
    print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö: {file_type}")
    
    if file_type == "excel":
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Excel —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        print("   –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Excel –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –∏ –†–ê–ó–†–ê–ë–û–¢–ö–ò")
        print("   –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º <gs>")
        print("   –î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSV —Ñ–∞–π–ª—ã")
        print(f"  –õ–∏—Å—Ç Excel: {args.excel_sheet}")
    elif file_type == "csv":
        print("‚úì CSV —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã")
    else:
        print("‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è CSV")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    kwargs = {
        'dm_x': args.dm_x,
        'dm_y': args.dm_y,
        'dm_size': args.dm_size,
        'datamatrix_column': args.datamatrix_column,
        'text_column': args.text_column,
        'text_start': args.text_start,
        'text_length': args.text_length,
        'text_font_size': args.text_font_size,
        'text_offset_x': args.text_offset_x,
        'text_offset_y': args.text_offset_y,
        'text_color': args.text_color,
        'excel_sheet': args.excel_sheet,
        'dpi': args.dpi
    }
    
    if args.type == 'multiple':
        kwargs.update({
            'labels_horizontal': args.labels_horizontal,
            'labels_vertical': args.labels_vertical,
            'label_width': args.label_width,
            'label_height': args.label_height,
            'label_margin_left': args.label_margin_left,
            'label_margin_top': args.label_margin_top,
            'label_spacing_horizontal': args.label_spacing_horizontal,
            'label_spacing_vertical': args.label_spacing_vertical
        })
        config = create_multiple_template_config(args.data_file, args.template_pdf, args.output_pdf, **kwargs)
    else:
        config = create_single_template_config(args.data_file, args.template_pdf, args.output_pdf, **kwargs)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    output_file = args.output or 'config.json'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        
        print(f"\n‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {output_file}")
        print(f"‚úì –¢–∏–ø —à–∞–±–ª–æ–Ω–∞: {args.type}")
        print(f"‚úì –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {args.data_file}")
        print(f"‚úì –®–∞–±–ª–æ–Ω PDF: {args.template_pdf}")
        print(f"‚úì –í—ã—Ö–æ–¥–Ω–æ–π PDF: {args.output_pdf}")
        
        if file_type == "excel":
            print(f"‚úì –õ–∏—Å—Ç Excel: {args.excel_sheet}")
        
        print(f"\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print(f"  python gen2.py -c {output_file}")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
